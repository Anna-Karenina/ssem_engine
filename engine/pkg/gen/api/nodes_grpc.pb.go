// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: api/nodes.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodesClient is the client API for Nodes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodesClient interface {
	CreateNode(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Node, error)
	ReadNode(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*Node, error)
	UpdateNode(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Node, error)
	RemoveNode(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadRequest, error)
	ReadAllNodes(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*NodeList, error)
	RunNode(ctx context.Context, in *RunNodeRequest, opts ...grpc.CallOption) (*NodeRunTime, error)
	StopNode(ctx context.Context, in *StopNodeRequest, opts ...grpc.CallOption) (*NodeRunTime, error)
	UpdateNodeScripts(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*Node, error)
}

type nodesClient struct {
	cc grpc.ClientConnInterface
}

func NewNodesClient(cc grpc.ClientConnInterface) NodesClient {
	return &nodesClient{cc}
}

func (c *nodesClient) CreateNode(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.Nodes/CreateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) ReadNode(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.Nodes/ReadNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) UpdateNode(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.Nodes/UpdateNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) RemoveNode(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadRequest, error) {
	out := new(ReadRequest)
	err := c.cc.Invoke(ctx, "/api.Nodes/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) ReadAllNodes(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := c.cc.Invoke(ctx, "/api.Nodes/ReadAllNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) RunNode(ctx context.Context, in *RunNodeRequest, opts ...grpc.CallOption) (*NodeRunTime, error) {
	out := new(NodeRunTime)
	err := c.cc.Invoke(ctx, "/api.Nodes/RunNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) StopNode(ctx context.Context, in *StopNodeRequest, opts ...grpc.CallOption) (*NodeRunTime, error) {
	out := new(NodeRunTime)
	err := c.cc.Invoke(ctx, "/api.Nodes/StopNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodesClient) UpdateNodeScripts(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/api.Nodes/UpdateNodeScripts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodesServer is the server API for Nodes service.
// All implementations must embed UnimplementedNodesServer
// for forward compatibility
type NodesServer interface {
	CreateNode(context.Context, *CreateRequest) (*Node, error)
	ReadNode(context.Context, *ReadRequest) (*Node, error)
	UpdateNode(context.Context, *CreateRequest) (*Node, error)
	RemoveNode(context.Context, *ReadRequest) (*ReadRequest, error)
	ReadAllNodes(context.Context, *EmptyParams) (*NodeList, error)
	RunNode(context.Context, *RunNodeRequest) (*NodeRunTime, error)
	StopNode(context.Context, *StopNodeRequest) (*NodeRunTime, error)
	UpdateNodeScripts(context.Context, *ReadRequest) (*Node, error)
	mustEmbedUnimplementedNodesServer()
}

// UnimplementedNodesServer must be embedded to have forward compatible implementations.
type UnimplementedNodesServer struct {
}

func (UnimplementedNodesServer) CreateNode(context.Context, *CreateRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedNodesServer) ReadNode(context.Context, *ReadRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNode not implemented")
}
func (UnimplementedNodesServer) UpdateNode(context.Context, *CreateRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNode not implemented")
}
func (UnimplementedNodesServer) RemoveNode(context.Context, *ReadRequest) (*ReadRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (UnimplementedNodesServer) ReadAllNodes(context.Context, *EmptyParams) (*NodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllNodes not implemented")
}
func (UnimplementedNodesServer) RunNode(context.Context, *RunNodeRequest) (*NodeRunTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunNode not implemented")
}
func (UnimplementedNodesServer) StopNode(context.Context, *StopNodeRequest) (*NodeRunTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopNode not implemented")
}
func (UnimplementedNodesServer) UpdateNodeScripts(context.Context, *ReadRequest) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNodeScripts not implemented")
}
func (UnimplementedNodesServer) mustEmbedUnimplementedNodesServer() {}

// UnsafeNodesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodesServer will
// result in compilation errors.
type UnsafeNodesServer interface {
	mustEmbedUnimplementedNodesServer()
}

func RegisterNodesServer(s grpc.ServiceRegistrar, srv NodesServer) {
	s.RegisterService(&Nodes_ServiceDesc, srv)
}

func _Nodes_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Nodes/CreateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).CreateNode(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_ReadNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).ReadNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Nodes/ReadNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).ReadNode(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_UpdateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).UpdateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Nodes/UpdateNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).UpdateNode(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Nodes/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).RemoveNode(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_ReadAllNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).ReadAllNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Nodes/ReadAllNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).ReadAllNodes(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_RunNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).RunNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Nodes/RunNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).RunNode(ctx, req.(*RunNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_StopNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).StopNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Nodes/StopNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).StopNode(ctx, req.(*StopNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nodes_UpdateNodeScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodesServer).UpdateNodeScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Nodes/UpdateNodeScripts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodesServer).UpdateNodeScripts(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Nodes_ServiceDesc is the grpc.ServiceDesc for Nodes service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Nodes_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Nodes",
	HandlerType: (*NodesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNode",
			Handler:    _Nodes_CreateNode_Handler,
		},
		{
			MethodName: "ReadNode",
			Handler:    _Nodes_ReadNode_Handler,
		},
		{
			MethodName: "UpdateNode",
			Handler:    _Nodes_UpdateNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _Nodes_RemoveNode_Handler,
		},
		{
			MethodName: "ReadAllNodes",
			Handler:    _Nodes_ReadAllNodes_Handler,
		},
		{
			MethodName: "RunNode",
			Handler:    _Nodes_RunNode_Handler,
		},
		{
			MethodName: "StopNode",
			Handler:    _Nodes_StopNode_Handler,
		},
		{
			MethodName: "UpdateNodeScripts",
			Handler:    _Nodes_UpdateNodeScripts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/nodes.proto",
}

// EnvironmentClient is the client API for Environment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentClient interface {
	ProcessStream(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (Environment_ProcessStreamClient, error)
	GetNodejsInfo(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*NodejsVersionsInfo, error)
}

type environmentClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentClient(cc grpc.ClientConnInterface) EnvironmentClient {
	return &environmentClient{cc}
}

func (c *environmentClient) ProcessStream(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (Environment_ProcessStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Environment_ServiceDesc.Streams[0], "/api.Environment/ProcessStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &environmentProcessStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Environment_ProcessStreamClient interface {
	Recv() (*ProcessInfo, error)
	grpc.ClientStream
}

type environmentProcessStreamClient struct {
	grpc.ClientStream
}

func (x *environmentProcessStreamClient) Recv() (*ProcessInfo, error) {
	m := new(ProcessInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *environmentClient) GetNodejsInfo(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*NodejsVersionsInfo, error) {
	out := new(NodejsVersionsInfo)
	err := c.cc.Invoke(ctx, "/api.Environment/GetNodejsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvironmentServer is the server API for Environment service.
// All implementations must embed UnimplementedEnvironmentServer
// for forward compatibility
type EnvironmentServer interface {
	ProcessStream(*DataRequest, Environment_ProcessStreamServer) error
	GetNodejsInfo(context.Context, *EmptyParams) (*NodejsVersionsInfo, error)
	mustEmbedUnimplementedEnvironmentServer()
}

// UnimplementedEnvironmentServer must be embedded to have forward compatible implementations.
type UnimplementedEnvironmentServer struct {
}

func (UnimplementedEnvironmentServer) ProcessStream(*DataRequest, Environment_ProcessStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessStream not implemented")
}
func (UnimplementedEnvironmentServer) GetNodejsInfo(context.Context, *EmptyParams) (*NodejsVersionsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodejsInfo not implemented")
}
func (UnimplementedEnvironmentServer) mustEmbedUnimplementedEnvironmentServer() {}

// UnsafeEnvironmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentServer will
// result in compilation errors.
type UnsafeEnvironmentServer interface {
	mustEmbedUnimplementedEnvironmentServer()
}

func RegisterEnvironmentServer(s grpc.ServiceRegistrar, srv EnvironmentServer) {
	s.RegisterService(&Environment_ServiceDesc, srv)
}

func _Environment_ProcessStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnvironmentServer).ProcessStream(m, &environmentProcessStreamServer{stream})
}

type Environment_ProcessStreamServer interface {
	Send(*ProcessInfo) error
	grpc.ServerStream
}

type environmentProcessStreamServer struct {
	grpc.ServerStream
}

func (x *environmentProcessStreamServer) Send(m *ProcessInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Environment_GetNodejsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).GetNodejsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Environment/GetNodejsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).GetNodejsInfo(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Environment_ServiceDesc is the grpc.ServiceDesc for Environment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Environment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Environment",
	HandlerType: (*EnvironmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodejsInfo",
			Handler:    _Environment_GetNodejsInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessStream",
			Handler:       _Environment_ProcessStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/nodes.proto",
}
