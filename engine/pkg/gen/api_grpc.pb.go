// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: api.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Apps_CreateApp_FullMethodName              = "/api.Apps/CreateApp"
	Apps_ReadApp_FullMethodName                = "/api.Apps/ReadApp"
	Apps_UpdateApp_FullMethodName              = "/api.Apps/UpdateApp"
	Apps_RemoveApp_FullMethodName              = "/api.Apps/RemoveApp"
	Apps_ReadAllApps_FullMethodName            = "/api.Apps/ReadAllApps"
	Apps_RunApp_FullMethodName                 = "/api.Apps/RunApp"
	Apps_StopApp_FullMethodName                = "/api.Apps/StopApp"
	Apps_SyncAppScripts_FullMethodName         = "/api.Apps/SyncAppScripts"
	Apps_UpdateDefaultRunScript_FullMethodName = "/api.Apps/UpdateDefaultRunScript"
)

// AppsClient is the client API for Apps service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppsClient interface {
	CreateApp(ctx context.Context, in *CreateAppPayload, opts ...grpc.CallOption) (*App, error)
	ReadApp(ctx context.Context, in *AppIdPayload, opts ...grpc.CallOption) (*App, error)
	UpdateApp(ctx context.Context, in *CreateAppPayload, opts ...grpc.CallOption) (*App, error)
	RemoveApp(ctx context.Context, in *AppIdPayload, opts ...grpc.CallOption) (*AppIdPayload, error)
	ReadAllApps(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*AppList, error)
	RunApp(ctx context.Context, in *RunAppRequest, opts ...grpc.CallOption) (*AppRunTime, error)
	StopApp(ctx context.Context, in *StopAppRequest, opts ...grpc.CallOption) (*AppRunTime, error)
	SyncAppScripts(ctx context.Context, in *AppIdPayload, opts ...grpc.CallOption) (*App, error)
	UpdateDefaultRunScript(ctx context.Context, in *UpdateDefaultRunScriptParams, opts ...grpc.CallOption) (*App, error)
}

type appsClient struct {
	cc grpc.ClientConnInterface
}

func NewAppsClient(cc grpc.ClientConnInterface) AppsClient {
	return &appsClient{cc}
}

func (c *appsClient) CreateApp(ctx context.Context, in *CreateAppPayload, opts ...grpc.CallOption) (*App, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(App)
	err := c.cc.Invoke(ctx, Apps_CreateApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) ReadApp(ctx context.Context, in *AppIdPayload, opts ...grpc.CallOption) (*App, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(App)
	err := c.cc.Invoke(ctx, Apps_ReadApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) UpdateApp(ctx context.Context, in *CreateAppPayload, opts ...grpc.CallOption) (*App, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(App)
	err := c.cc.Invoke(ctx, Apps_UpdateApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) RemoveApp(ctx context.Context, in *AppIdPayload, opts ...grpc.CallOption) (*AppIdPayload, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppIdPayload)
	err := c.cc.Invoke(ctx, Apps_RemoveApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) ReadAllApps(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*AppList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppList)
	err := c.cc.Invoke(ctx, Apps_ReadAllApps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) RunApp(ctx context.Context, in *RunAppRequest, opts ...grpc.CallOption) (*AppRunTime, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppRunTime)
	err := c.cc.Invoke(ctx, Apps_RunApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) StopApp(ctx context.Context, in *StopAppRequest, opts ...grpc.CallOption) (*AppRunTime, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppRunTime)
	err := c.cc.Invoke(ctx, Apps_StopApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) SyncAppScripts(ctx context.Context, in *AppIdPayload, opts ...grpc.CallOption) (*App, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(App)
	err := c.cc.Invoke(ctx, Apps_SyncAppScripts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appsClient) UpdateDefaultRunScript(ctx context.Context, in *UpdateDefaultRunScriptParams, opts ...grpc.CallOption) (*App, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(App)
	err := c.cc.Invoke(ctx, Apps_UpdateDefaultRunScript_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppsServer is the server API for Apps service.
// All implementations must embed UnimplementedAppsServer
// for forward compatibility.
type AppsServer interface {
	CreateApp(context.Context, *CreateAppPayload) (*App, error)
	ReadApp(context.Context, *AppIdPayload) (*App, error)
	UpdateApp(context.Context, *CreateAppPayload) (*App, error)
	RemoveApp(context.Context, *AppIdPayload) (*AppIdPayload, error)
	ReadAllApps(context.Context, *EmptyParams) (*AppList, error)
	RunApp(context.Context, *RunAppRequest) (*AppRunTime, error)
	StopApp(context.Context, *StopAppRequest) (*AppRunTime, error)
	SyncAppScripts(context.Context, *AppIdPayload) (*App, error)
	UpdateDefaultRunScript(context.Context, *UpdateDefaultRunScriptParams) (*App, error)
	mustEmbedUnimplementedAppsServer()
}

// UnimplementedAppsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppsServer struct{}

func (UnimplementedAppsServer) CreateApp(context.Context, *CreateAppPayload) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedAppsServer) ReadApp(context.Context, *AppIdPayload) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadApp not implemented")
}
func (UnimplementedAppsServer) UpdateApp(context.Context, *CreateAppPayload) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedAppsServer) RemoveApp(context.Context, *AppIdPayload) (*AppIdPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveApp not implemented")
}
func (UnimplementedAppsServer) ReadAllApps(context.Context, *EmptyParams) (*AppList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllApps not implemented")
}
func (UnimplementedAppsServer) RunApp(context.Context, *RunAppRequest) (*AppRunTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunApp not implemented")
}
func (UnimplementedAppsServer) StopApp(context.Context, *StopAppRequest) (*AppRunTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopApp not implemented")
}
func (UnimplementedAppsServer) SyncAppScripts(context.Context, *AppIdPayload) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAppScripts not implemented")
}
func (UnimplementedAppsServer) UpdateDefaultRunScript(context.Context, *UpdateDefaultRunScriptParams) (*App, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefaultRunScript not implemented")
}
func (UnimplementedAppsServer) mustEmbedUnimplementedAppsServer() {}
func (UnimplementedAppsServer) testEmbeddedByValue()              {}

// UnsafeAppsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppsServer will
// result in compilation errors.
type UnsafeAppsServer interface {
	mustEmbedUnimplementedAppsServer()
}

func RegisterAppsServer(s grpc.ServiceRegistrar, srv AppsServer) {
	// If the following call pancis, it indicates UnimplementedAppsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Apps_ServiceDesc, srv)
}

func _Apps_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apps_CreateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).CreateApp(ctx, req.(*CreateAppPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_ReadApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).ReadApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apps_ReadApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).ReadApp(ctx, req.(*AppIdPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apps_UpdateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).UpdateApp(ctx, req.(*CreateAppPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_RemoveApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).RemoveApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apps_RemoveApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).RemoveApp(ctx, req.(*AppIdPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_ReadAllApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).ReadAllApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apps_ReadAllApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).ReadAllApps(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_RunApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).RunApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apps_RunApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).RunApp(ctx, req.(*RunAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_StopApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).StopApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apps_StopApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).StopApp(ctx, req.(*StopAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_SyncAppScripts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppIdPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).SyncAppScripts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apps_SyncAppScripts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).SyncAppScripts(ctx, req.(*AppIdPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apps_UpdateDefaultRunScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefaultRunScriptParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppsServer).UpdateDefaultRunScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apps_UpdateDefaultRunScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppsServer).UpdateDefaultRunScript(ctx, req.(*UpdateDefaultRunScriptParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Apps_ServiceDesc is the grpc.ServiceDesc for Apps service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Apps_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Apps",
	HandlerType: (*AppsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _Apps_CreateApp_Handler,
		},
		{
			MethodName: "ReadApp",
			Handler:    _Apps_ReadApp_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _Apps_UpdateApp_Handler,
		},
		{
			MethodName: "RemoveApp",
			Handler:    _Apps_RemoveApp_Handler,
		},
		{
			MethodName: "ReadAllApps",
			Handler:    _Apps_ReadAllApps_Handler,
		},
		{
			MethodName: "RunApp",
			Handler:    _Apps_RunApp_Handler,
		},
		{
			MethodName: "StopApp",
			Handler:    _Apps_StopApp_Handler,
		},
		{
			MethodName: "SyncAppScripts",
			Handler:    _Apps_SyncAppScripts_Handler,
		},
		{
			MethodName: "UpdateDefaultRunScript",
			Handler:    _Apps_UpdateDefaultRunScript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

const (
	Environment_ProcessStream_FullMethodName              = "/api.Environment/ProcessStream"
	Environment_GetNodejsInfo_FullMethodName              = "/api.Environment/GetNodejsInfo"
	Environment_UpdateDefaultNodejsVersion_FullMethodName = "/api.Environment/UpdateDefaultNodejsVersion"
	Environment_DownloadNodeJsVersion_FullMethodName      = "/api.Environment/DownloadNodeJsVersion"
)

// EnvironmentClient is the client API for Environment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvironmentClient interface {
	ProcessStream(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProcessInfo], error)
	GetNodejsInfo(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*NodejsVersionsInfo, error)
	UpdateDefaultNodejsVersion(ctx context.Context, in *UpdateDefaultNodejsVersionParams, opts ...grpc.CallOption) (*StatusResponse, error)
	DownloadNodeJsVersion(ctx context.Context, in *RequestVersion, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadStatusResponse], error)
}

type environmentClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvironmentClient(cc grpc.ClientConnInterface) EnvironmentClient {
	return &environmentClient{cc}
}

func (c *environmentClient) ProcessStream(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProcessInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Environment_ServiceDesc.Streams[0], Environment_ProcessStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataRequest, ProcessInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Environment_ProcessStreamClient = grpc.ServerStreamingClient[ProcessInfo]

func (c *environmentClient) GetNodejsInfo(ctx context.Context, in *EmptyParams, opts ...grpc.CallOption) (*NodejsVersionsInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodejsVersionsInfo)
	err := c.cc.Invoke(ctx, Environment_GetNodejsInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentClient) UpdateDefaultNodejsVersion(ctx context.Context, in *UpdateDefaultNodejsVersionParams, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, Environment_UpdateDefaultNodejsVersion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentClient) DownloadNodeJsVersion(ctx context.Context, in *RequestVersion, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Environment_ServiceDesc.Streams[1], Environment_DownloadNodeJsVersion_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RequestVersion, DownloadStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Environment_DownloadNodeJsVersionClient = grpc.ServerStreamingClient[DownloadStatusResponse]

// EnvironmentServer is the server API for Environment service.
// All implementations must embed UnimplementedEnvironmentServer
// for forward compatibility.
type EnvironmentServer interface {
	ProcessStream(*DataRequest, grpc.ServerStreamingServer[ProcessInfo]) error
	GetNodejsInfo(context.Context, *EmptyParams) (*NodejsVersionsInfo, error)
	UpdateDefaultNodejsVersion(context.Context, *UpdateDefaultNodejsVersionParams) (*StatusResponse, error)
	DownloadNodeJsVersion(*RequestVersion, grpc.ServerStreamingServer[DownloadStatusResponse]) error
	mustEmbedUnimplementedEnvironmentServer()
}

// UnimplementedEnvironmentServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnvironmentServer struct{}

func (UnimplementedEnvironmentServer) ProcessStream(*DataRequest, grpc.ServerStreamingServer[ProcessInfo]) error {
	return status.Errorf(codes.Unimplemented, "method ProcessStream not implemented")
}
func (UnimplementedEnvironmentServer) GetNodejsInfo(context.Context, *EmptyParams) (*NodejsVersionsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodejsInfo not implemented")
}
func (UnimplementedEnvironmentServer) UpdateDefaultNodejsVersion(context.Context, *UpdateDefaultNodejsVersionParams) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDefaultNodejsVersion not implemented")
}
func (UnimplementedEnvironmentServer) DownloadNodeJsVersion(*RequestVersion, grpc.ServerStreamingServer[DownloadStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadNodeJsVersion not implemented")
}
func (UnimplementedEnvironmentServer) mustEmbedUnimplementedEnvironmentServer() {}
func (UnimplementedEnvironmentServer) testEmbeddedByValue()                     {}

// UnsafeEnvironmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvironmentServer will
// result in compilation errors.
type UnsafeEnvironmentServer interface {
	mustEmbedUnimplementedEnvironmentServer()
}

func RegisterEnvironmentServer(s grpc.ServiceRegistrar, srv EnvironmentServer) {
	// If the following call pancis, it indicates UnimplementedEnvironmentServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Environment_ServiceDesc, srv)
}

func _Environment_ProcessStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnvironmentServer).ProcessStream(m, &grpc.GenericServerStream[DataRequest, ProcessInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Environment_ProcessStreamServer = grpc.ServerStreamingServer[ProcessInfo]

func _Environment_GetNodejsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).GetNodejsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Environment_GetNodejsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).GetNodejsInfo(ctx, req.(*EmptyParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environment_UpdateDefaultNodejsVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDefaultNodejsVersionParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentServer).UpdateDefaultNodejsVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Environment_UpdateDefaultNodejsVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentServer).UpdateDefaultNodejsVersion(ctx, req.(*UpdateDefaultNodejsVersionParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environment_DownloadNodeJsVersion_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestVersion)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EnvironmentServer).DownloadNodeJsVersion(m, &grpc.GenericServerStream[RequestVersion, DownloadStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Environment_DownloadNodeJsVersionServer = grpc.ServerStreamingServer[DownloadStatusResponse]

// Environment_ServiceDesc is the grpc.ServiceDesc for Environment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Environment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Environment",
	HandlerType: (*EnvironmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNodejsInfo",
			Handler:    _Environment_GetNodejsInfo_Handler,
		},
		{
			MethodName: "UpdateDefaultNodejsVersion",
			Handler:    _Environment_UpdateDefaultNodejsVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessStream",
			Handler:       _Environment_ProcessStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadNodeJsVersion",
			Handler:       _Environment_DownloadNodeJsVersion_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
